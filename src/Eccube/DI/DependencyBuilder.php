<?php

namespace Eccube\DI;

use Doctrine\Common\Annotations\Reader;
use Eccube\Annotation\Inject;
use Eccube\Application;
use Pimple\Container;
use Symfony\Component\Finder\Finder;

class DependencyBuilder
{

    /**
     * @var string
     */
    private $providerDir;

    /**
     * @var string
     */
    private $providerClass;

    /**
     * @var AutoWiring[]
     */
    private $wirings;

    /**
     * @var Reader
     */
    private $reader;

    /**
     * @var bool
     */
    private $debug;

    private static $template = '<?php

/**
 * {{ provider_class }}
 *
 * This class has been auto-generated by Eccube\DI\DependencyBuilder
 */
class {{ provider_class }} implements \Pimple\ServiceProviderInterface
{
    public function register(\Pimple\Container $app)
    {
{{ snippets|raw }}
    }
}';

    /**
     * Di constructor.
     * @param string $providerDir
     * @param string $providerClass
     * @param AutoWiring[] $wirings
     * @param Reader $reader
     * @param bool $debug
     */
    public function __construct($providerDir, $providerClass, array $wirings, Reader $reader, $debug)
    {
        $this->providerDir = $providerDir;
        $this->providerClass = $providerClass;
        $this->wirings = $wirings;
        $this->reader = $reader;
        $this->debug = $debug;
    }


    public function isApplication($class)
    {
        return $class === Application::class;
    }

    public function getProviderPath()
    {
        return $this->providerDir.'/'.$this->providerClass.'.php';
    }

    public function build(Container $container)
    {
        if ($this->debug || false === file_exists($this->getProviderPath())) {
            $this->generateServiceProvider();
        }

        $path = $this->getProviderPath();
        $class = $this->providerClass;

        require_once $path;

        $container->register(new $class());
    }

    public function findClasses(array $dirs)
    {
        $files = Finder::create()
            ->in($dirs)
            ->name('*.php')
            ->files();

        $classes = [];
        $includedFiles = [];
        foreach ($files as $file) {
            $path = $file->getRealPath();
            require_once $path;
            $includedFiles[] = $path;
        }

        $declared = get_declared_classes();

        foreach ($declared as $className) {
            $rc = new \ReflectionClass($className);
            $sourceFile = $rc->getFileName();
            if (in_array($sourceFile, $includedFiles)) {
                $classes[] = $className;
            }
        }

        return $classes;
    }

    private function generateServiceProvider()
    {
        if (!is_dir($this->providerDir) && !@mkdir($this->providerDir, 0777, true) && !is_dir($this->providerDir)) {
            throw new \RuntimeException(
                sprintf('ProviderGenerator was not able to create directory "%s"', $this->providerDir)
            );
        }

        $scanDirs = array_filter(array_reduce($this->wirings, function($result, AutoWiring $wiring) {
            return array_merge($result, $wiring->getScanDirs());
        }, []), function($dir) {
            return file_exists($dir);
        });

        $classes = $this->findClasses($scanDirs);

        $twig = new \Twig_Environment(new \Twig_Loader_Array());
        $twig->addFunction(new \Twig_SimpleFunction('is_app', [$this, 'isApplication']));

        $snippets = '';

        foreach ($this->wirings as $wiring) {
            $components = [];

            foreach ($classes as $className) {
                $rc = new \ReflectionClass($className);
                $anno = $wiring->findAnnotation($this->reader, $rc);
                if ($anno) {
                    $component = $components[] = $wiring->createComponentDefinition($anno, $rc);

                    $refProps = $rc->getProperties();
                    foreach ($refProps as $refProp) {
                        $anno = $this->reader->getPropertyAnnotation($refProp, Inject::class);
                        if (is_null($anno)) {
                            continue;
                        }
                        $component->addDenendency(new Dependency($anno->value, $refProp->getName()));
                    }
                }
            }

            if (!empty($components)) {
                if ($snippets) $snippets .= PHP_EOL;
                $snippets .= $wiring->generate($twig, $components);
                $snippets .= $wiring->generateExtend($twig, $components);
            }
        }

        $content = $twig->createTemplate(self::$template)->render([
            'provider_class' => $this->providerClass,
            'snippets' => preg_replace('/^/m', '        ', $snippets)
        ]);

        file_put_contents($this->getProviderPath(), $content);
    }
}
