<?php

namespace Eccube\Di;

use Eccube\Annotation\FormExtension;
use Eccube\Annotation\FormType;
use Eccube\Annotation\Repository;
use Eccube\Application;

class ProviderGenerator
{
    protected $twig;

    protected $providerDir;

    protected $providerClass;

    protected $template = '<?php

/**
 * {{ provider_class }}
 *
 * This class has been auto-generated by Eccube\Di\ProviderGenerator
 */
class {{ provider_class }} implements \Pimple\ServiceProviderInterface
{
    public function register(\Pimple\Container $app)
    {
        {% for component in components -%}
        $app["{{ component.id }}"] = function (\Pimple\Container $app) {
            $class = new \ReflectionClass(\{{ component.class_name }}::class);
            {% if is_repo(component.anno) -%}
            $instance = $app["orm.em"]->getRepository(\{{ convert_to_entity(component.class_name) }}::class);
            {%- else -%}
            $instance = $class->newInstanceWithoutConstructor();
            {%- endif %}

            {% for inject in component.injects -%}
            $property = $class->getProperty("{{ inject.property_name }}");
            $property->setAccessible(true);
            $property->setValue($instance, {% if is_app(inject.id) %}$app{% else %}$app["{{ inject.id }}"]{% endif %});
            {% endfor %}

            return $instance;
        };
        {% endfor %}

        {% if form_types|length > 0 -%}
        $app->extend("form.types", function ($types) {
            {% for types in form_types -%}
            $types[] = "{{ types.id }}";
            {% endfor %}

            return $types;
        });
        {%- endif %}

        {% if form_extensions|length > 0 -%}
        $app->extend("form.type.extensions", function ($extensions) {
            {% for extension in form_extensions -%}
            $extensions[] = "{{ extension.id }}";
            {% endfor %}

            return $extensions;
        });
        {%- endif %}

    }
}';

    public function __construct($providerDir, $providerClass)
    {
        if (!is_dir($providerDir) && !@mkdir($providerDir, 0777, true) && !is_dir($providerDir)) {
            throw new \RuntimeException(
                sprintf('ProviderGenerator was not able to create directory "%s"', $providerDir)
            );
        }

        $this->providerDir = $providerDir;
        $this->providerClass = $providerClass;

        $this->twig = new \Twig_Environment(new \Twig_Loader_Array());
        $this->twig->addFunction(new \Twig_SimpleFunction('is_repo', [$this, 'isRepository']));
        $this->twig->addFunction(new \Twig_SimpleFunction('is_app', [$this, 'isApplication']));
        $this->twig->addFunction(new \Twig_SimpleFunction('convert_to_entity', [$this, 'convertToEntity']));
    }

    public function getProviderPath()
    {
        return $this->providerDir.'/'.$this->providerClass.'.php';
    }

    public function getProviderClass()
    {
        return $this->providerClass;
    }

    public function providerExists()
    {
        return file_exists($this->getProviderPath());
    }

    public function dump(array $components)
    {
        $provider = $this->generate($components);

        return file_put_contents($this->getProviderPath(), $provider);
    }

    public function generate(array $components)
    {
        $template = $this->twig->createTemplate($this->template);

        $formTypes = array_filter(
            $components,
            function ($component) {
                return get_class($component['anno']) === FormType::class;
            }
        );
        $formExtensions = array_filter(
            $components,
            function ($component) {
                return get_class($component['anno']) === FormExtension::class;
            }
        );

        return $template->render(
            [
                'provider_class' => $this->providerClass,
                'components' => $components,
                'form_types' => $formTypes,
                'form_extensions' => $formExtensions,
            ]
        );
    }

    public function isRepository($anno)
    {
        return $anno instanceof Repository;
    }

    public function isApplication($class)
    {
        return $class === Application::class;
    }

    public function convertToEntity($class)
    {
        $ns = 'Eccube\\Entity\\';
        if (strpos($class, 'Master') !== false) {
            $ns .= 'Master\\';
        }

        $array = explode('\\', $class);
        $name = end($array);
        $name = str_replace('Repository', '', $name);
        $entity = $ns.$name;

        return $entity;
    }
}
