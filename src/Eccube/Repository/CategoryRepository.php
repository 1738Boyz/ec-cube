<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


namespace Eccube\Repository;

use Doctrine\DBAL\Exception\DriverException;
use Doctrine\DBAL\Exception\ForeignKeyConstraintViolationException;
use Eccube\Annotation\Inject;
use Eccube\Annotation\Repository;
use Eccube\Entity\Category;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @Repository
 */
class CategoryRepository extends AbstractRepository
{
    /**
     * @Inject("config")
     * @var array
     */
    protected $appConfig;

    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Category::class);
    }

    /**
     * 全カテゴリの合計を取得する.
     *
     * @return int 全カテゴリの合計数
     */
    public function getTotalCount()
    {
        return $this
            ->createQueryBuilder('c')
            ->select('COALESCE(COUNT(c.id), 0)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * カテゴリ一覧を取得する.
     *
     * 引数 $Parent を指定した場合は, 指定したカテゴリの子以下を取得する.
     *
     * @param Category|null $Parent 指定の親カテゴリ
     * @param bool $flat trueの場合, 階層化されたカテゴリを一つの配列にまとめる
     *
     * @return Category[] カテゴリの配列
     */
    public function getList(Category $Parent = null, $flat = false)
    {
        $options = $this->appConfig['doctrine_cache'];
        $lifetime = $options['result_cache']['lifetime'];

        $qb = $this->createQueryBuilder('c1')
            ->select('c1, c2, c3, c4, c5')
            ->leftJoin('c1.Children', 'c2')
            ->leftJoin('c2.Children', 'c3')
            ->leftJoin('c3.Children', 'c4')
            ->leftJoin('c4.Children', 'c5')
            ->orderBy('c1.rank', 'DESC')
            ->addOrderBy('c2.rank', 'DESC')
            ->addOrderBy('c3.rank', 'DESC')
            ->addOrderBy('c4.rank', 'DESC')
            ->addOrderBy('c5.rank', 'DESC');

        if ($Parent) {
            $qb->where('c1.Parent = :Parent')->setParameter('Parent', $Parent);
        } else {
            $qb->where('c1.Parent IS NULL');
        }
        $Categories = $qb->getQuery()
            ->useResultCache(true, $lifetime)
            ->getResult();

        if ($flat) {
            $array = array();
            foreach ($Categories as $Category) {
                $array = array_merge($array, $Category->getSelfAndDescendants());
            }
            $Categories = $array;
        }

        return $Categories;
    }

    /**
     * カテゴリを保存する.
     *
     * @param  Category $Category カテゴリ
     */
    public function save($Category)
    {
        if (!$Category->getId()) {
            $Parent = $Category->getParent();
            if ($Parent) {
                $rank = $Parent->getRank() - 1;
            } else {
                $rank = $this->createQueryBuilder('c')
                    ->select('COALESCE(MAX(c.rank), 0)')
                    ->getQuery()
                    ->getSingleScalarResult();
            }

            $Category->setRank($rank + 1);

            $this
                ->createQueryBuilder('c')
                ->update()
                ->set('c.rank', 'c.rank + 1')
                ->where('c.rank > :rank')
                ->setParameter('rank', $rank)
                ->getQuery()
                ->execute();
        }

        $em = $this->getEntityManager();
        $em->persist($Category);
        $em->flush($Category);
    }

    /**
     * カテゴリを削除する.
     *
     * @param  Category $Category 削除対象のカテゴリ
     *
     * @throws ForeignKeyConstraintViolationException 外部キー制約違反の場合
     * @throws DriverException SQLiteの場合, 外部キー制約違反が発生すると, DriverExceptionをthrowします.
     */
    public function delete($Category)
    {
        $this
            ->createQueryBuilder('c')
            ->update()
            ->set('c.rank', 'c.rank - 1')
            ->where('c.rank > :rank')
            ->setParameter('rank', $Category->getRank())
            ->getQuery()
            ->execute();

        $em = $this->getEntityManager();
        $em->remove($Category);
        $em->flush($Category);
    }
}
