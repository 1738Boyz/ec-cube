<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


namespace Eccube\Tests\Web\Admin\Setting\Shop;

use Eccube\Tests\Web\Admin\AbstractAdminWebTestCase;
use Symfony\Component\Yaml\Yaml;

class SecurityControllerTest extends AbstractAdminWebTestCase
{
    protected $configFile;
    protected $configFileBackup;

    protected $pathFile;
    protected $pathFileBackup;
    protected $ipTest = '192.168.1.100';
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        if (!$this->backupConfig() || !$this->backupPath()) {
            $this->markTestSkipped('Backup fail!!!');
        }
//        $config = Yaml::parse(file_get_contents($this->configFile));
//        $config['admin_allow_host'] = array($this->ipTest);
//        file_put_contents($this->configFile, Yaml::dump($config));
    }

    public function tearDown()
    {
        $this->rollbackConfig();
        $this->rollbackPath();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function backupConfig()
    {
        $this->configFile = $this->app['config']['root_dir'] . '/app/config/eccube/config.yml';
        $this->configFileBackup = $this->app['config']['root_dir'] . '/app/config/eccube/config.yml.bak';
        if (!file_exists($this->configFileBackup)) {
            return copy($this->configFile, $this->configFileBackup);
        }
        return false;
    }

    protected function rollbackConfig()
    {
        if (empty($this->configFile) || empty($this->configFileBackup)) {
            return false;
        }
        if (file_exists($this->configFileBackup)) {
            unlink($this->configFile);
            return rename($this->configFileBackup, $this->configFile);
        }
        return false;
    }

    protected function backupPath()
    {
        $this->pathFile = $this->app['config']['root_dir'] . '/app/config/eccube/path.yml';
        $this->pathFileBackup = $this->app['config']['root_dir'] . '/app/config/eccube/path.yml.bak';
        if (!file_exists($this->pathFileBackup)) {
            return copy($this->pathFile, $this->pathFileBackup);
        }
        return false;
    }

    protected function rollbackPath()
    {
        if (empty($this->pathFile) || empty($this->pathFileBackup)) {
            return false;
        }
        if (file_exists($this->pathFileBackup)) {
            unlink($this->pathFile);
            return rename($this->pathFileBackup, $this->pathFile);
        }
        return false;
    }

    public function testRouting()
    {
        $this->client->request('GET', $this->app['url_generator']->generate('admin_setting_system_security'));
        $this->assertTrue($this->client->getResponse()->isSuccessful());
    }

    public function testSubmit()
    {
        $formData = $this->createFormData();

        $this->client->request('POST',
            $this->app['url_generator']->generate('admin_setting_system_security'),
            array(
                'admin_security' => $formData
            )
        );

        $this->assertTrue($this->client->getResponse()->isRedirection());

        $config = Yaml::parse(file_get_contents($this->configFile));
        $this->assertTrue(in_array($formData['admin_allow_host'], $config['admin_allow_host']));

        $path = Yaml::parse(file_get_contents($this->pathFile));
        $this->expected = $formData['admin_route_dir'];
        $this->actual = $path['admin_route'];
        $this->verify();
    }

    public function testSubmitEmpty()
    {
        $formData = $this->createFormData();
        $formData['admin_allow_host'] = null;
        $formData['force_ssl'] = null;
        $formData['admin_route_dir'] = $this->app['config']['admin_route'];

        $this->client->request('POST',
            $this->app['url_generator']->generate('admin_setting_system_security'),
            array(
                'admin_security' => $formData
            )
        );

        $this->assertTrue($this->client->getResponse()->isSuccessful());

        $config = Yaml::parse(file_get_contents($this->configFile));
        $this->assertNull($config['admin_allow_host']);
    }

    public function createFormData()
    {
        $formData = array(
            '_token' => 'dummy',
            'admin_route_dir' => 'admintest',
            'admin_allow_host' => $this->ipTest,
            'force_ssl' => 1
        );
        return $formData;
    }
    //    TO DO : implement
}
